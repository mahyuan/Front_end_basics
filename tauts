[1mdiff --cc mysql/mysql_notes.md[m
[1mindex c72681f,e514cc8..0000000[m
mode 100644,100644..100755[m
[1m--- a/mysql/mysql_notes.md[m
[1m+++ b/mysql/mysql_notes.md[m
[36m@@@ -1,168 -1,224 +1,382 @@@[m
  # MySQL笔记[m
  [m
[32m++<<<<<<< HEAD[m
[32m +登录：[m
[32m +mysql -uroot -p[m
[32m +[m
[32m +参数：[m
[32m +-D, --database=name 打开指定数据库[m
[32m +--detailmiter=name 指定分隔符[m
[32m +-h, --host=name 服务器[m
[32m +-p, --password[=name] 密码[m
[32m +-P, --port=# 端口号 （-P 大写的P）[m
[32m +--prompt=name 设置提示符[m
[32m +-u, --user=name 用户名[m
[32m +-V, --version 输出版本信息且退出[m
[32m +[m
[32m +退出:[m
[32m +exit; quit; \q;[m
[32m +[m
[32m +修改提示符:[m
[32m +登录的时候指定： mysql -uroot --prompt \h -p[m
[32m +登录后指定：[m
[32m +语法： prompt 提示符[m
[32m +参数：[m
[32m +\D 完整的日期；[m
[32m +\d 当前数据库[m
[32m +\h 服务器名称[m
[32m +\u 当前用户[m
[32m +[m
[32m +常用命令：[m
[32m +1.显示当前服务器版本：[m
[32m +    select version();[m
[32m +2.显示当前日期时间:[m
[32m +    select now();[m
[32m +3.显示当前用户：[m
[32m +    select user();[m
[32m +[m
[32m +语句规范：[m
[32m +1.关键字和函数名大写[m
[32m +2.数据库名称、表名称、字段名称小写[m
[32m +3.SQL语句必须以分号结尾[m
[32m +[m
[32m +[m
[32m +- 创建数据库[m
[32m +create {database | schema} [if not exists] db_name [default] character set [=] charset_name;[m
[32m +- 查看创建数据库的信息：[m
[32m +show create database db_name;[m
[32m +- 修改数据库[m
[32m +alter {database | schema} [db_name] [default] character set [=] charset_name;[m
[32m +- 删除数据库[m
[32m +drop {database | schema} [if exists] db_name;[m
[32m +[m
[32m +## 数据类型[m
[32m +- 整型 无符号位是有符号位的2倍[m
[32m + - tinyint -128~127,0-255 无符号位：2^8-1 1字节[m
[32m + - smallint  2^16-1 2字节[m
[32m + - mediumint 2^24-13字节[m
[32m + - int 2^32-1 4字节[m
[32m + - bigint 2^64-1 8字节[m
[32m +[m
[32m +- 浮点型[m
[32m + - float[M, D] 单精度  （M是数字总位数，D是小数点后面的位数）[m
[32m + - double[M,D] 双精度[m
[32m +[m
[32m +- 日期时间型[m
[32m + - year (存储需求:) 1[m
[32m + - time 3[m
[32m + - date 3[m
[32m + - datetime 8[m
[32m + - timestamp 4[m
[32m +[m
[32m +- 字符型[m
[32m + - char(M) M个字节 0<M<=255 （定长，不足的位数用0补齐）[m
[32m + - varchar(M) L+1个字节，其中 L<M && 0<M<=65535 （变长，字符多长存多长）[m
[32m + - tinytext L +1 个字节，其中L<2E8[m
[32m + - text L+2字节，其中L<2E16[m
[32m + - mediumtext[m
[32m + - longtext[m
[32m + - enum('value1', 'value2', ...) 1或2个字节，取决于枚举值的个数（最多65535个值）[m
[32m + 枚举类型，从几个选项里面选择，如性别：男，女，保密[m
[32m + - set('value1', 'value2', ...) 集合类型，从选项中选择任意（多）个选项[m
[32m +[m
[32m +## 数据表操作[m
[32m +- 选择数据库[m
[32m +打开数据库后，使用`use`命令选择数据表。[m
[32m +use db_name;[m
[32m +- 查看打开的数据库[m
[32m +select database();[m
[32m +- 创建数据表[m
[32m++=======[m
[32m+ ## 1. 登录相关 [m
[32m+ ###  1.1 登录：[m
[32m+ ```sh[m
[32m+     mysql -uroot -p[m
[32m+ ```[m
[32m+ [m
[32m+ ### 1.2 登录时的参数：[m
[32m+ [m
[32m+     用法|介绍[m
[32m+     ---|---[m
[32m+     -D, --database=name |打开指定数据库[m
[32m+     --detailmiter=name| 指定分隔符[m
[32m+     -h, --host=name |服务器[m
[32m+     -p, --password[=name] |密码[m
[32m+     -P, --port=# |端口号 （-P 大写的P）[m
[32m+     --prompt=name |设置提示符[m
[32m+     -u, --user=name |用户名[m
[32m+     -V, --version |输出版本信息且退出[m
[32m+ [m
[32m+ ### 1.3 退出:[m
[32m+   - exit; [m
[32m+   - quit; [m
[32m+   - \q;[m
[32m+ [m
[32m+ ### 1.4 修改提示符:[m
[32m+ - 登录的时候指定：[m
[32m+     ```sh[m
[32m+     mysql -uroot --prompt \h -p[m
[32m+     ```[m
[32m+ - 登录后指定：[m
[32m+ [m
[32m+     语法： prompt 提示符[m
[32m+ [m
[32m+     参数| 含义[m
[32m+     --|--[m
[32m+     \D | 完整的日期；[m
[32m+     \d | 当前数据库[m
[32m+     \h | 服务器名称[m
[32m+     \u | 当前用户[m
[32m+ [m
[32m+ ### 1.5 常用命令：[m
[32m+ - 显示当前服务器版本：[m
[32m+ ```sql[m
[32m+ select version();[m
[32m+ ```[m
[32m+ - 显示当前日期时间:[m
[32m+ ```sql[m
[32m+ select now();[m
[32m+ ```[m
[32m+ - 显示当前用户：[m
[32m+ ```sql[m
[32m+ select user();[m
[32m+ ```[m
[32m+ ### 1.6 语句规范：[m
[32m+   - 关键字和函数名大写[m
[32m+   - 数据库名称、表名称、字段名称小写[m
[32m+   - SQL语句必须以分号结尾[m
[32m+ [m
[32m+ ## 2. 操作数据库[m
[32m+ [m
[32m+ ### 2.1 创建数据库[m
[32m+ ```sql[m
[32m+ create {database | schema} [if not exists] db_name [default] character set [=] charset_name;[m
[32m+ ```[m
[32m+ ### 2.2 查看创建数据库的信息：[m
[32m+ ```sql[m
[32m+ show create database db_name;[m
[32m+ ```[m
[32m+ ### 2.3 修改数据库[m
[32m+ ```sql[m
[32m+ alter {database | schema} [db_name] [default] character set [=] charset_name;[m
[32m+ ```[m
[32m+ ### 2.4 删除数据库[m
[32m+ ```sql[m
[32m+ drop {database | schema} [if exists] db_name;[m
[32m+ ```[m
[32m+ [m
[32m+ ## 3. 数据类型[m
[32m+ ### 3.1 整型 [m
[32m+   - tinyint 有符号位：-128~127, 无符号位：0~255 （2^8-1） 1字节[m
[32m+   - smallint  2^16-1 2字节[m
[32m+   - mediumint 2^24-13字节[m
[32m+   - int 2^32-1 4字节[m
[32m+   - bigint 2^64-1 8字节[m
[32m+  [m
[32m+  无符号位是有符号位的2倍[m
[32m+ [m
[32m+ ### 3.2 浮点型[m
[32m+   - float[M, D] 单精度  （M是数字总位数，D是小数点后面的位数）[m
[32m+   - double[M,D] 双精度[m
[32m+ [m
[32m+ ### 3.3 日期时间型[m
[32m+   - year (存储需求:) 1字节[m
[32m+   - time 3字节[m
[32m+   - date 3字节[m
[32m+   - datetime 8字节[m
[32m+   - timestamp 4字节[m
[32m+ [m
[32m+ ### 3.4 字符型[m
[32m+   - char(M) M个字节 0<M<=255 （定长，不足的位数用0补齐）[m
[32m+   - varchar(M) L+1个字节，其中 L<M && 0<M<=65535 （变长，字符多长存多长）[m
[32m+   - tinytext L +1 个字节，其中L<2E8[m
[32m+   - text L+2字节，其中L<2E16[m
[32m+   - mediumtext[m
[32m+   - longtext[m
[32m+   - enum('value1', 'value2', ...) 1或2个字节，取决于枚举值的个数（最多65535个值）[m
[32m+   枚举类型，从几个选项里面选择，如性别：男，女，保密[m
[32m+   - set('value1', 'value2', ...) 集合类型，从选项中选择任意（多）个选项[m
[32m+ [m
[32m+ ## 4. 数据表操作[m
[32m+ ### 4.1 选择数据库[m
[32m+ 打开数据库后，使用`use`命令选择数据表：[m
[32m+ ```sql[m
[32m+ use db_name;[m
[32m+ ```[m
[32m+ ### 4.2 查看打开的数据库[m
[32m+ ```sql[m
[32m+ select database();[m
[32m+ ```[m
[32m+ ### 4.3 创建数据表[m
[32m+ 语法：[m
[32m+ ```sql[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  create table [if not exists] table_name ([m
      column_name data_type,[m
      ...[m
  )[m
[32m++<<<<<<< HEAD[m
[32m +[m
[32m +```sh[m
[32m++=======[m
[32m+ ```[m
[32m+ eg:[m
[32m+ ```sql[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  create table tb1([m
      id int unsigned primary key auto_inscrement,[m
      username varchar(20),[m
      salary float(8,2)[m
  );[m
  ```[m
[32m++<<<<<<< HEAD[m
[32m +- 查看数据表[m
[32m +show tables [from db_name] [like 'pattern' | where expr];[m
[32m +- 查看数据表结构 -列[m
[32m +show columns from tbl_name;[m
[32m +- 插入记录 -行[m
[32m +inset [into] tbl_name [(col_name,...)] values(val,...);[m
[32m +省略col_name时需要给所有的字段赋值。[m
[32m +- 记录查找[m
[32m +select expr,... from tbl_name;[m
[32m +(expr ----表达式）[m
[32m +[m
[32m +## 约束[m
[32m +1.保证数据的完整性和一致性[m
[32m +2.约束分为表级约束和列级约束[m
[32m +3.约束类型包括：[m
[32m + 3.1 not null 非空约束[m
[32m + 3.2 primary key 主键约束[m
[32m + 3.3 unique key 唯一约束[m
[32m + 3.4 default 默认约束[m
[32m + 3.5 foreign key 外键约束[m
[32m +[m
[32m +## 空值与非空[m
[32m +- null 字段可以为空[m
[32m +- not null 字段禁止为空[m
[32m +默认为null[m
[32m +[m
[32m +## 自动编号 auto_increment[m
[32m +自动编号，必须与主键组合使用[m
[32m +默认情况下，起始值为1，增量为1[m
[32m +[m
[32m +## 主键约束 primary_key[m
[32m +每张表只能有一个主键[m
[32m +主键保证记录的唯一性[m
[32m +主键自动为not null[m
[32m +auto_increment必须和主键一起使用,但主键不一定和auto_increment一起使用[m
[32m +[m
[32m +## 唯一约束 unique key[m
[32m +唯一约束保证记录的唯一性[m
[32m +唯一约束的字段可以为空值[m
[32m +每张表可以保存多个唯一约束[m
[32m +[m
[32m +## 默认值 default[m
[32m +插入记录时，如果没有明确为字段赋值，则自动赋予默认值[m
[32m +```sh[m
[32m++=======[m
[32m+ ### 4.4 查看数据表[m
[32m+ 语法：[m
[32m+ ```sql[m
[32m+ show tables [from db_name] [like 'pattern' | where expr];[m
[32m+ ```[m
[32m+ ### 4.5 查看数据表结构(列)[m
[32m+ 语法：[m
[32m+ ```sql[m
[32m+ show columns from tbl_name;[m
[32m+ ```[m
[32m+ 或者使用`describe tbl_name`语句：[m
[32m+ ```sql[m
[32m+ describe tbl_name;[m
[32m+ ```[m
[32m+ ### 4.6 插入记录(行)[m
[32m+ 语法：[m
[32m+ ```[m
[32m+ inset [into] tbl_name [(col_name,...)] values(val,...);[m
[32m+ ```[m
[32m+ 省略col_name时需要给所有的字段赋值。[m
[32m+ [m
[32m+ ### 4.7 记录查找[m
[32m+ 语法:[m
[32m+ ```sql[m
[32m+ select expr,... from tbl_name;[m
[32m+ ```[m
[32m+ (expr ----表达式）[m
[32m+ 记录查找后面会具体研究。[m
[32m+ [m
[32m+ ## 5. 约束[m
[32m+   - 保证数据的完整性和一致性[m
[32m+   - 约束分为表级约束和列级约束[m
[32m+   - 约束类型包括：[m
[32m+     - not null:  非空约束[m
[32m+     - primary key: 主键约束[m
[32m+     - unique key: 唯一约束[m
[32m+     - default: 默认约束[m
[32m+     - foreign: key 外键约束[m
[32m+ [m
[32m+ ### 5.1 主键约束 primary_key[m
[32m+   - 每张表只能有一个主键[m
[32m+   - 主键保证记录的唯一性[m
[32m+   - 主键自动为not null[m
[32m+   - auto_increment必须和主键一起使用,但主键不一定和auto_increment一起使用[m
[32m+ [m
[32m+ ### 5.2 唯一约束 unique key[m
[32m+   - 唯一约束保证记录的唯一性[m
[32m+   - 唯一约束的字段可以为空值[m
[32m+   - 每张表可以保存多个唯一约束[m
[32m+  [m
[32m+ ### 5.3 空值与非空[m
[32m+   - null 字段可以为空[m
[32m+   - not null 字段禁止为空[m
[32m+   - 默认为null[m
[32m+ [m
[32m+ ### 5.4 自动编号 auto_increment[m
[32m+   - 自动编号，必须与主键组合使用[m
[32m+   - 默认情况下，起始值为1，增量为1 [m
[32m+ [m
[32m+ ### 5.5 默认值 default[m
[32m+ 插入记录时，如果没有明确为字段赋值，则自动赋予默认值：[m
[32m+ ```sql[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  create table tb([m
      id smallint unsigned auto_increment primary key,[m
      sex enum('男','女', '保密') default '保密'[m
  );[m
  ```[m
[32m++<<<<<<< HEAD[m
[32m +## 外键约束 foreign key[m
[32m +保证数据的一致性和完整性[m
[32m +实现一对多或一对一关系[m
[32m +[m
[32m +外键约束的要求：[m
[32m +1.父表和子表必须使用相同的存储引擎，禁止使用临时表[m
[32m +2.数据表的存储引擎必须为InnoDB[m
[32m +3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同。而字符的长度则可以不同。[m
[32m +4.外键列和参照列必须创建索引，如果外键列不存在索引的话，MySQL将自动创建索引。（参照列没有索引才自动创建索引，而外键列没有索引的话不自动创建索引）[m
[32m++=======[m
[32m+ ### 5.6 外键约束 foreign key[m
[32m+  - 保证数据的一致性和完整性[m
[32m+  - 实现一对多或一对一关系[m
[32m+ [m
[32m+ #### 5.6.1 外键约束的要求：[m
[32m+  - 父表和子表必须使用相同的存储引擎，禁止使用临时表[m
[32m+  - 数据表的存储引擎必须为InnoDB[m
[32m+  - 外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同。而字符的长度则可以不同。[m
[32m+  - 外键列和参照列必须创建索引，如果外键列不存在索引的话，MySQL将自动创建索引。（参照列没有索引才自动创建索引，而外键列没有索引的话不自动创建索引）[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  [m
  如果存储引擎不是InnoDB，可以修改存储引擎，在配置文件my.ini中修改以下自段：[m
  ```ini[m
  default-storage-engine=INNODB[m
  ```[m
[32m++<<<<<<< HEAD[m
[32m +实例：[m
[32m +```sh[m
[32m++=======[m
[32m+ ### 5.6.2 创建外键约束[m
[32m+ 实例：[m
[32m+ ```sql[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  create table provinces([m
      id smallint unsigned primary key auto_increment,[m
      pname varchar(20) not null[m
[36m@@@ -175,20 -231,23 +389,40 @@@[m [mcreate table users[m
      foreign key(pid) references provinces (id)[m
  );[m
  ```[m
[32m++<<<<<<< HEAD[m
[32m +## 查看索引[m
[32m +show indexes from users;[m
[32m +指定了主键和外键时会自动创建索引[m
[32m +[m
[32m +## 外键约束的参照操作[m
[32m +- cascade：[m
[32m + 从父表删除或更新且自动删除或更新子表中匹配的行[m
[32m +- set null：[m
[32m +  从父表删除或更新行，并设置子表的外键列为null。 如果使用该选项，必须保证子列表没有指定的not null。[m
[32m +- restrict：[m
[32m +拒绝对父表的删除或更新操作[m
[32m +- no action：[m
[32m +标准SQL的关键字，在MySQL中与restrict相同[m
[32m + ```sh[m
[32m++=======[m
[32m+ ### 5.6.3 查看索引[m
[32m+ ```sql[m
[32m+ show indexes from users;[m
[32m+ ```[m
[32m+ 指定了主键和外键时会自动创建索引[m
[32m+ [m
[32m+ ### 5.6.4 外键约束的参照操作[m
[32m+   - cascade：[m
[32m+    从父表删除或更新且自动删除或更新子表中匹配的行[m
[32m+   - set null：[m
[32m+     从父表删除或更新行，并设置子表的外键列为null。 如果使用该选项，必须保证子列表没有指定的not null。[m
[32m+   - restrict：[m
[32m+   拒绝对父表的删除或更新操作[m
[32m+   - no action：[m
[32m+   标准SQL的关键字，在MySQL中与restrict相同[m
[32m+ [m
[32m+ ```sql[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  create table provinces([m
      id smallint unsigned primary key auto_increment,[m
      pname varchar(20) not null[m
[36m@@@ -203,120 -262,49 +437,166 @@@[m [mcreate table users[m
  ```[m
  上面代码和之前的区别是在最后一行多出了`on delete cascade`字段，表示删除父表时子表也删除。[m
  [m
[32m++<<<<<<< HEAD[m
[32m +##表级约束和列级约束[m
[32m +对一个数据列建立的约束，称为列级约束；[m
[32m +对多个数据列建立的约束，称为表级约束；[m
[32m +列级约束就可以在列定义时声明，也可以在列定以后声明；[m
[32m +表级约束只能在列定以后声明。[m
[32m +实际开发中表级约束很少。[m
[32m +[m
[32m +## 修改数据表[m
[32m +- 添加单列[m
[32m +alter table tbl_name add [column] col_name column_definition [first | after col_name];[m
[32m +- 添加多列[m
[32m +alter table tbl_name add [column] (col_name column_definition, ...);[m
[32m +区别： 添加多列不能指定添加位置，只能添加到所有列的最后。[m
[32m +- 删除列[m
[32m +alter table tbl_name drop [column] col_name;[m
[32m +altet table tbl_name drop [column] col_name1, drop col_name2,add (col_name3 column_definition);[m
[32m +可以删除多列，中间用逗号分隔，也可以同时添加列。[m
[32m +[m
[32m +- 添加主键[m
[32m +alter table tbl_name add [constraint [symbol] primary key [index_type] (index_col_name, ...)];[m
[32m +[m
[32m +- 添加唯一约束[m
[32m +alter table tbl_name add [constraint [symbol]] unique [index | key] [index_name] [index_type] (index_col_name,...);[m
[32m +[m
[32m +- 添加外键约束[m
[32m +alter table tbl_name add [constraint [symbol]] foreign key [index_name] (index_col_name, ...) reference_definition;[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m +[m
[32m++=======[m
[32m+ ### 5.6.5 表级约束和列级约束[m
[32m+   - 对一个数据列建立的约束，称为列级约束；[m
[32m+   - 对多个数据列建立的约束，称为表级约束；[m
[32m+   - 列级约束就可以在列定义时声明，也可以在列定以后声明；[m
[32m+   - 表级约束只能在列定以后声明。[m
[32m+   - 实际开发中表级约束很少。[m
[32m+ [m
[32m+ ## 6. 修改数据表[m
[32m+ ### 6.1 添加单列[m
[32m+ ```sql[m
[32m+ alter table tbl_name add [column] col_name column_definition [first | after col_name];[m
[32m+ ```[m
[32m+ ### 6.2 添加多列[m
[32m+ ```sql[m
[32m+ alter table tbl_name add [column] (col_name column_definition, ...);[m
[32m+ ```[m
[32m+ 区别： 添加多列不能指定添加位置，只能添加到所有列的最后。[m
[32m+ [m
[32m+ ### 6.3 删除列[m
[32m+ ```sql[m
[32m+ alter table tbl_name drop [column] col_name;[m
[32m+ ```[m
[32m+ 可以删除多列，中间用逗号分隔，也可以同时添加列:[m
[32m+ ```sql[m
[32m+ alter table tbl_name drop [column] col_name1, drop col_name2,add (col_name3 column_definition);[m
[32m+ ```[m
[32m+ ### 6.4 添加主键[m
[32m+ ```sql[m
[32m+ alter table tbl_name add [constraint [symbol] primary key [index_type] (index_col_name, ...)];[m
[32m+ ```[m
[32m+ ### 6.5 添加唯一约束[m
[32m+ ```sql[m
[32m+ alter 5able tbl_name add [constraint [symbol]] unique [index | key] [index_name] [index_type] (index_col_name,...);[m
[32m+ ```[m
[32m+ ### 6.6 添加外键约束[m
[32m+ ```sql[m
[32m+ alter table tbl_name add [constraint [symbol]] foreign key [index_name] (index_col_name, ...) reference_definition;[m
[32m+ ```[m
[32m+ [m
[32m+ ## 7. 修改记录[m
[32m+ ```sql[m
[32m+ update tbl_name set col_name=value where expr;[m
[32m+ ```[m
[32m++>>>>>>> 602c023fcfec75cf5b91f407c35aa6f0f4c89237[m
  [m
  [m
  [m
